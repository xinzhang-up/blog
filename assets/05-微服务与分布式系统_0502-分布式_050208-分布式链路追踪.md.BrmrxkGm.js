import{_ as t,c as i,o as e,ag as n}from"./chunks/framework.DPDPlp3K.js";const l="/assets/1742477435599.fiAoQ9e9.png",r="/assets/1742477459556.BcktTHpJ.png",m=JSON.parse('{"title":"分布式链路追踪","description":"","frontmatter":{},"headers":[],"relativePath":"05-微服务与分布式系统/0502-分布式/050208-分布式链路追踪.md","filePath":"05-微服务与分布式系统/0502-分布式/050208-分布式链路追踪.md"}'),o={name:"05-微服务与分布式系统/0502-分布式/050208-分布式链路追踪.md"};function s(p,a,_,c,d,u){return e(),i("div",null,a[0]||(a[0]=[n('<h1 id="分布式链路追踪" tabindex="-1">分布式链路追踪 <a class="header-anchor" href="#分布式链路追踪" aria-label="Permalink to &quot;分布式链路追踪&quot;">​</a></h1><h2 id="spring-cloud-sleuth" tabindex="-1">Spring Cloud Sleuth <a class="header-anchor" href="#spring-cloud-sleuth" aria-label="Permalink to &quot;Spring Cloud Sleuth&quot;">​</a></h2><p>链路追踪就是将一次分布式请求，还原成调用链路，进行：日志记录、性能监控、并将一次分布式请求的调用情况集中展示。</p><p>Spring Cloud Sleuth采用的是Google的开源项目Dapper的专业术语，span、Trace、Annotations。</p><ul><li>Span, 每次发送一个远程调用服务就会产生一个span, span通过一个64位ID唯一标识, 还有其他数据信息, 如摘要, 时间戳, tags, IP等</li><li>Trace, 一个Trace是一次完整的链路, 内部包含多个span</li><li>Annotations, 用来及时记录一个事件的存在，一些核心 annotations 用来定义一个请求的开始和结束</li></ul><p>基本原理: 在入口生成（traceid，spanid），并在调用中将traceid传递下去。</p><p>Sleuth可以实现服务调用的链路透传， 如果需要实现链路检索功能，可以使用Zipkin, Zipkin核心功能日志收集和链路检索，Zipkin 具有可视化页面。</p><h2 id="zipkin" tabindex="-1">Zipkin <a class="header-anchor" href="#zipkin" aria-label="Permalink to &quot;Zipkin&quot;">​</a></h2><ul><li>整体架构</li></ul><p><img src="'+l+'" alt="1742477435599"></p><ul><li>工作流程 <img src="'+r+'" alt="1742477459556"></li></ul>',11)]))}const g=t(o,[["render",s]]);export{m as __pageData,g as default};

import{_ as a,c as i,o as s,ag as d}from"./chunks/framework.DPDPlp3K.js";const l="/assets/1741098903075.c7MYG2Hs.png",e="/assets/1741099010084.-aj6qzJ2.png",n="/assets/1741099275123.CVSi4GvJ.png",r="/assets/1741099286641.Boy5I1H5.png",h="/assets/1741099301866.DsYsk3-J.png",p="/assets/1741099309215.BLMjXfPg.png",F=JSON.parse('{"title":"PowerDesign简易教程","description":"","frontmatter":{},"headers":[],"relativePath":"03-数据库与持久化/0301-关系型数据库/030101-PowerDesign简易教程.md","filePath":"03-数据库与持久化/0301-关系型数据库/030101-PowerDesign简易教程.md"}'),o={name:"03-数据库与持久化/0301-关系型数据库/030101-PowerDesign简易教程.md"};function c(k,t,E,g,u,m){return s(),i("div",null,t[0]||(t[0]=[d('<h1 id="powerdesign简易教程" tabindex="-1">PowerDesign简易教程 <a class="header-anchor" href="#powerdesign简易教程" aria-label="Permalink to &quot;PowerDesign简易教程&quot;">​</a></h1><h2 id="维护库表" tabindex="-1">维护库表 <a class="header-anchor" href="#维护库表" aria-label="Permalink to &quot;维护库表&quot;">​</a></h2><p>版本 ：16.5.0.3982 (<code>Help</code>-&gt;<code>About PowerDesigner</code>, 项目组成员的PowerDesigner版本必须一致).</p><p>注意：添加字段前需要和组内成员沟通，确认此前修改的文件必须提交才能继续操作.</p><h3 id="cdm概念模型操作流程" tabindex="-1">cdm概念模型操作流程 <a class="header-anchor" href="#cdm概念模型操作流程" aria-label="Permalink to &quot;cdm概念模型操作流程&quot;">​</a></h3><ol><li>新建cdm, <code>Workspace</code>-&gt;<code>New</code>-&gt;<code>Conceptual Data Model</code>-&gt;输入名称</li><li>划分cdm模块, 比如公共模块(存放租户, 基础, 启用等实体), 基础模块(存放用户, 角色等通用实体), 各业务模块等.</li><li>添加实体维护字段, 右侧 <code>Toolbox</code>-&gt;<code>Entity</code>选中并添加, 双击选中 <code>Entity</code>, 维护 <code>General</code>面板中的 <code>Name</code>, <code>Code</code>, 维护 <code>Attributes</code>面板中的字段, 示例如下</li></ol><p><img src="'+l+'" alt="1741098903075"></p><ol start="4"><li>建立实体之间的继承关系, 右侧 <code>Toolbox</code>-&gt;Inheritance选中, 然后在面板中由子实体连向父实体, 如下示例</li></ol><p><img src="'+e+`" alt="1741099010084"></p><ol start="5"><li>维护字段的域, 域可以定义检查约束、取值范围、最大值、最小值、默认值等. 顶栏 <code>Model</code>-&gt;<code>Domains</code>列出所有域, 新添字段时, 优先使用已存在的域, 若没有对应类型则需要先维护域, 再维护字段, 常见的域如下示例</li></ol><table tabindex="0"><thead><tr><th>Name</th><th>Code</th><th>Data Type</th><th>Length</th><th>Precision</th><th>M</th></tr></thead><tbody><tr><td>json</td><td>json</td><td>Variable characters (2048)</td><td>2,048</td><td></td><td></td></tr><tr><td>md5</td><td>md5</td><td>Variable characters (32)</td><td>32</td><td></td><td></td></tr><tr><td>url</td><td>url</td><td>Variable characters (500)</td><td>500</td><td></td><td></td></tr><tr><td>人名</td><td>operator</td><td>Variable characters (20)</td><td>20</td><td></td><td></td></tr><tr><td>令牌</td><td>token</td><td>Variable characters (100)</td><td>100</td><td></td><td></td></tr><tr><td>优先级</td><td>priority</td><td>Short integer</td><td></td><td></td><td></td></tr><tr><td>加密字段</td><td>encrypt_field</td><td>Variable characters (500)</td><td>500</td><td></td><td></td></tr><tr><td>名称</td><td>name</td><td>Variable characters (50)</td><td>50</td><td></td><td></td></tr><tr><td>地址</td><td>address</td><td>Variable characters (1500)</td><td>1,500</td><td></td><td></td></tr><tr><td>密码</td><td>password</td><td>Variable characters (100)</td><td>100</td><td></td><td>X</td></tr><tr><td>布尔</td><td>boolean</td><td>Boolean</td><td></td><td></td><td>X</td></tr><tr><td>数量</td><td>quantity</td><td>Integer</td><td></td><td></td><td></td></tr><tr><td>日期</td><td>date</td><td>Date</td><td></td><td></td><td></td></tr><tr><td>日期时间</td><td>date_time</td><td>Date &amp; Time</td><td></td><td></td><td></td></tr><tr><td>时间</td><td>time</td><td>Time</td><td></td><td></td><td></td></tr><tr><td>枚举</td><td>enum</td><td>tinyint unsigned</td><td></td><td></td><td></td></tr><tr><td>标识</td><td>id</td><td>bigint unsigned</td><td></td><td></td><td>X</td></tr><tr><td>版本</td><td>version</td><td>Integer</td><td></td><td></td><td></td></tr><tr><td>电话</td><td>telephone</td><td>Variable characters (50)</td><td>50</td><td></td><td></td></tr><tr><td>百分比</td><td>percentage</td><td>tinyint unsigned</td><td></td><td></td><td></td></tr><tr><td>短备注</td><td>remark</td><td>Variable characters (100)</td><td>100</td><td></td><td></td></tr><tr><td>编码</td><td>code</td><td>Variable characters (50)</td><td>50</td><td></td><td></td></tr><tr><td>路径</td><td>path</td><td>Variable characters (100)</td><td>100</td><td></td><td></td></tr><tr><td>邮箱</td><td>email</td><td>Variable characters (100)</td><td>100</td><td></td><td></td></tr><tr><td>金额</td><td>price</td><td>Decimal (15,4)</td><td>15</td><td>4</td><td></td></tr><tr><td>长备注</td><td>long_remark</td><td>Variable characters (500)</td><td>500</td><td></td><td></td></tr></tbody></table><ol start="6"><li>生成pdm, 顶栏 <code>Tools</code>-&gt;<code>Generate Physical Data Model</code>选择对应的数据库以及版本</li></ol><h3 id="pdm物理模型操作流程" tabindex="-1">pdm物理模型操作流程 <a class="header-anchor" href="#pdm物理模型操作流程" aria-label="Permalink to &quot;pdm物理模型操作流程&quot;">​</a></h3><ol><li>确认物理模型的表以及字段添加成功</li><li>生成备注, 顶栏 <code>Tools</code>--&gt;<code>Execute Commands</code>--&gt;<code>Edit/Run Scripts</code>, 执行name2comment脚本</li></ol><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Option   Explicit   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ValidationMode   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   True   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InteractiveMode   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   im_Batch  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dim   mdl   </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;   the   current   model  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   get   the   current   active   model   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set   mdl   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ActiveModel   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">If</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   (mdl   Is   Nothing)   Then   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MsgBox   </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There   is   no   current   Model &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ElseIf   Not   mdl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsKindOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PdPDM.cls_Model)   Then   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MsgBox   </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The   current   model   is   not   an   Physical   Data   model. &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Else   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ProcessFolder   mdl   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">End   If  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;   This   routine   copy   name   into   comment   for   each   table,   each   column   and   each   view   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   of   the   current   folder   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Private   sub   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProcessFolder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Dim   Tab   </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;running     table   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      for   each   Tab   in   folder.tables   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            if   not   tab.isShortcut   then   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  tab.comment   =   tab.name   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  Dim   col   &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   running   column   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   each   col   in   tab.columns   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        col.comment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   col.name   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  next   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            end   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      next  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Dim   view   </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;running   view   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      for   each   view   in   folder.Views   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            if   not   view.isShortcut   then   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  view.comment   =   view.name   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            end   if   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      next  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   go   into   the   sub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">packages   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Dim   f   </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;   running   folder   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      For   Each   f   In   folder.Packages   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            if   not   f.IsShortcut   then   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  ProcessFolder   f   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            end   if   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Next   </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">end   sub</span></span></code></pre></div><ol start="3"><li>生成sql脚本, 顶栏 <code>Database</code>-&gt;<code>Generate Database</code>, 在General面板确认生成的文件名以及路径, 在Format面板勾选：<code>Generate name in empty comment</code>，编码类型为：<code>UTF-8</code>, 在 <code>Selection</code>面板确认选择的表, 在 <code>Preview</code>一栏确认是否有生成注释, 点击确认即可</li></ol><h2 id="基本规范" tabindex="-1">基本规范 <a class="header-anchor" href="#基本规范" aria-label="Permalink to &quot;基本规范&quot;">​</a></h2><h3 id="维护流程" tabindex="-1">维护流程 <a class="header-anchor" href="#维护流程" aria-label="Permalink to &quot;维护流程&quot;">​</a></h3><ol><li>先维护cdm, 再生成pdm, cdm以及pdm文件需一同做版本管理</li><li>表必须指定主键索引, 编码必须指定唯一索引, 布尔值需考虑非空约束, 新建表同时需考虑建立普通索引</li></ol><h3 id="字段设计规范" tabindex="-1">字段设计规范 <a class="header-anchor" href="#字段设计规范" aria-label="Permalink to &quot;字段设计规范&quot;">​</a></h3><ul><li>所有标识符均采用小写，各单词之间用下划线隔开，长度不超过30</li><li>同一字段在各表的名称、类型必须一致</li><li>树形结构表添加cid字段记录层次数据，添加parent_id记录上级数据</li><li>默认使用innodb引擎</li><li>默认使用UTF-8编码</li><li>数字类型均不允许为NULL</li><li>单据表采用乐观锁解决并发问题，统一增加version字段</li></ul><h3 id="类型命名规范" tabindex="-1">类型命名规范 <a class="header-anchor" href="#类型命名规范" aria-label="Permalink to &quot;类型命名规范&quot;">​</a></h3><ul><li>主键：表名_id，无符号bigint</li><li>枚举： tinyint(3)</li><li>金额：decimal(15,4)</li><li>布尔值：tinyint(1)，is_开头，默认值为0</li><li>日期：date，_date结尾</li><li>带时间日期：datetime，_time结尾</li><li>普通字符串：varchar</li><li>汉字字符串：nvarchar</li></ul><h3 id="常用字段命名规范" tabindex="-1">常用字段命名规范 <a class="header-anchor" href="#常用字段命名规范" aria-label="Permalink to &quot;常用字段命名规范&quot;">​</a></h3><ul><li>金额：_amount结尾</li><li>价格：_price结尾</li><li>数量：_quantity结尾</li><li>备注：remark</li><li>是否作废：is_invalid</li><li>计划数量：plan_quantity</li><li>锁定数量：lock_quantity</li><li>出库数量：out_quantity</li><li>入库数量：in_quantity</li></ul><h2 id="理论补充" tabindex="-1">理论补充 <a class="header-anchor" href="#理论补充" aria-label="Permalink to &quot;理论补充&quot;">​</a></h2><h3 id="schema与数据类型优化" tabindex="-1">Schema与数据类型优化 <a class="header-anchor" href="#schema与数据类型优化" aria-label="Permalink to &quot;Schema与数据类型优化&quot;">​</a></h3><p>注: 内容来源为《高性能MYSQL》对应章节</p><h4 id="选择优化的数据类型" tabindex="-1">选择优化的数据类型 <a class="header-anchor" href="#选择优化的数据类型" aria-label="Permalink to &quot;选择优化的数据类型&quot;">​</a></h4><ol><li>更小的通常更好， 因为它们占用更少的磁盘，内存和CPU缓存，并且处理时需要的CPU周期也更少</li><li>简单就好， 例如，整形比字符操作代价更低，因为字符集和校对规则使字符比较比整形比较更麻烦</li><li>尽量避免使用null， 因为查询中包含可为null的列， 对mysql更难优化，可为null的列使得索引，索引统计和值比较都更复杂，可为null的列会使用更多的存储空间，在mysql里也需要特殊处理，当可为null的列被索引时，每个索引的记录需要一个额外的字节。</li></ol><h5 id="整数类型" tabindex="-1">整数类型 <a class="header-anchor" href="#整数类型" aria-label="Permalink to &quot;整数类型&quot;">​</a></h5><ul><li>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT, 分别使用8，16， 24， 32, 64位存储空间</li><li>整数类型可选的有UNSIGNED（无符号）属性，表示不允许负值，这大致可以使正数的上限提高一倍，比如TINYINT的存储范围是-128-127，TINYINT UNSIGNED的存储范围是0-255；有符号和无符号类型使用相同的存储空间，并具有相同的性能，因此可以根据实际情况选择合适的类型</li><li>mysql可以为整数类型指定宽度，比如INT(11), 对大多数应用这是没有意义的，它不会限制值的合法范围，只是规定了mysql的一些交互工具（比如命令行客户端）用来显示字符的个数，对于存储和计算来说，INT(1)和INT(20)是相同的</li></ul><p>与java中数据类型对应</p><p><img src="`+n+'" alt="1741099275123"></p><p>因此通用设计为**TINYINT(1)存储布尔, TINYINT(3)存储枚举, ** <strong>INT</strong> <strong>(11)存储Integer类型, BIGINT(20)存储Long类型</strong> .</p><h5 id="实数类型" tabindex="-1">实数类型 <a class="header-anchor" href="#实数类型" aria-label="Permalink to &quot;实数类型&quot;">​</a></h5><ul><li>实数是带有小数部分的数字, 也可以用DECIMAL存储比BIGINT还大的整数.</li><li>FLOAT和DOUBLE类型支持使用标准的浮点类型进行近似运算, DECIMAL类型用于存储精确的小数, 在mysql5.0和更高版本, DECIMAL类型支持精确计算.</li><li>浮点和DECIMAL类型都可以指定精度, 对于DECIMAL列, 可以指定小数点前后允许的最大位数. 例如DECIMAL(18,9)小数点两边各存9个数字, 占9个字节, 小数点本身占一个字节</li><li>因为需要额外的空间和计算开销, 所以应该尽量只在对小数进行精确计算时才使用DECIMAL, 例如存储财务数据, 但在数据量比较大的时候, 可以考虑使用BIGINT代替DECIMAL, 例如要存储财务数据精确到万分之一分, 则可以把所有金额乘以一百万, 然后将结果存在BIGINT里, 这样可以同时避免浮点数存储计算不精确和DICEMAL精确计算代价高的问题</li></ul><h5 id="字符串类型" tabindex="-1">字符串类型 <a class="header-anchor" href="#字符串类型" aria-label="Permalink to &quot;字符串类型&quot;">​</a></h5><ul><li>VARCHAR类型用于存储可变长字符串, 比定长更节省空间, 因为它仅使用必要的空间.</li></ul><p>适合使用VARCHAR的情况: 字符串列的最大长度比平均长度大很多, 列的更新很少, 所以碎片不是问题; 使用了像UTF-8这样复杂的字符集, 每个字符都使用不同的字节数进行存储</p><ul><li>CHAR类型是定长的, MYSQL总根据定义的长度分配足够的空间</li></ul><p>适合存储很短的字符串, 或者所有值都接近同一个长度, 例如, CHAR非常适合存储密码的MD5值, 对于经常变更的数据, CHAR也比VARCHAR更好, 因为定长的CHAR类型不容易产生碎片, 对于非常短的列, CHAR也比VARCHAR在存储空间上更有效率</p><p><img src="'+r+'" alt="1741099286641"></p><ul><li>BLOB和TEXT类型, 都是为存储很大的数据而设计的字符串数据类型, 分别采用二进制和字符方式存储.</li></ul><h5 id="日期和时间类型" tabindex="-1">日期和时间类型 <a class="header-anchor" href="#日期和时间类型" aria-label="Permalink to &quot;日期和时间类型&quot;">​</a></h5><p>保存日期和时间时, 使用DATETIME还是TIMESTAMP</p><ul><li>DATETIME</li></ul><p>能保存大范围的值, 从1001年到9999年, 精度为秒. 它将日期和时间封装到格式为YYYYMMDDHHMMSS的整数中, 与时区无关. 使用8个字节的存储空间. 默认情况下, MYSQL以一种可排序的无歧义的格式显示DATETIME的值, 比如&quot;2008-01-05 22:12:12&quot;;</p><ul><li>TIMESTAMP</li></ul><p>保存了从1970年1月1日午夜以来的秒数, 它和UNIX时间戳相同. 只使用4个字节的存储空间, 因此存储范围比DATETIME小得多, 只能表示从1970年到2038年.TIMESTAMP显示的值依赖于时区, MYSQL服务器, 操作系统以及客户端连接都有时区设置. 此外, TIMESTAMP列默认为NOT NULL, 插入记录时, MYSQL默认会更新第一个TIMESTAMP列的值.</p><p>除了特殊行为之外, 通常应该尽量使用TIMESTAMP, 因为它比DATETIME空间效率更高.</p><h5 id="位数据类型" tabindex="-1">位数据类型 <a class="header-anchor" href="#位数据类型" aria-label="Permalink to &quot;位数据类型&quot;">​</a></h5><ul><li>BIT, MYSQL将BIT当做字符串处理, 但是在数字上下文的场景中检索时, 却是将位字符串转换成数字. 对于大部分应用, 最好避免使用这种类型</li><li>SET, 如果要保存很多的true/false值, 可以考虑合并这些列到一个SET数据类型, 它在MYSQL内部是以一系列打包的位的集合来表示的; 另一种替代SET的方式是使用一个整数来包装一系列的位, 例如可以将8个位包装到一个TINYINT中, 并且按位操作来使用</li></ul><h5 id="特殊数据类型" tabindex="-1">特殊数据类型 <a class="header-anchor" href="#特殊数据类型" aria-label="Permalink to &quot;特殊数据类型&quot;">​</a></h5><p>某些类型的数据并不直接与内置类型一致</p><p><img src="'+h+'" alt="1741099301866"></p><h4 id="范式和反范式" tabindex="-1">范式和反范式 <a class="header-anchor" href="#范式和反范式" aria-label="Permalink to &quot;范式和反范式&quot;">​</a></h4><p>三大范式:</p><p>1.第一范式（1NF）列不可再分</p><p>2.第二范式（2NF）属性完全依赖于主键</p><p>3.第三范式（3NF）属性不依赖于其它非主属性, 属性直接依赖于主键</p><p>范式的优点:</p><ul><li>范式化的更新操作通常比反范式要快</li><li>当数据被较好的范式化时, 就只有很少或者没有重复数据, 所以只需要修改更少的数据</li><li>范式化的表通常更小, 所以放到内存中操作更快</li><li>很少有多余的数据意味着很少的DISTINCT或GROUP BY语句</li></ul><p>范式的缺点:</p><ul><li>稍微复杂一点的查询语句通常都要关联, 不但代价昂贵, 也可能使一些索引策略失效</li></ul><p><strong>总结</strong></p><p><img src="'+p+'" alt="1741099309215"></p><h3 id="mysql索引失效的场景" tabindex="-1">MYSQL索引失效的场景 <a class="header-anchor" href="#mysql索引失效的场景" aria-label="Permalink to &quot;MYSQL索引失效的场景&quot;">​</a></h3><p>参考: <a href="https://blog.csdn.net/wuseyukui/article/details/72312574" target="_blank" rel="noreferrer">https://blog.csdn.net/wuseyukui/article/details/72312574</a></p>',69)]))}const b=a(o,[["render",c]]);export{F as __pageData,b as default};

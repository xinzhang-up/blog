import{_ as r,c as o,o as e,ag as s}from"./chunks/framework.DPDPlp3K.js";const _=JSON.parse('{"title":"服务容错保护","description":"","frontmatter":{},"headers":[],"relativePath":"05-微服务与分布式系统/0502-分布式/050204-服务容错保护.md","filePath":"05-微服务与分布式系统/0502-分布式/050204-服务容错保护.md"}'),a={name:"05-微服务与分布式系统/0502-分布式/050204-服务容错保护.md"};function n(d,t,l,i,g,c){return e(),o("div",null,t[0]||(t[0]=[s('<h1 id="服务容错保护" tabindex="-1">服务容错保护 <a class="header-anchor" href="#服务容错保护" aria-label="Permalink to &quot;服务容错保护&quot;">​</a></h1><h2 id="spring-cloud-hystrix" tabindex="-1">Spring Cloud Hystrix <a class="header-anchor" href="#spring-cloud-hystrix" aria-label="Permalink to &quot;Spring Cloud Hystrix&quot;">​</a></h2><h3 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">​</a></h3><ul><li>熔断(Circuit Breaker): 当某个服务连续失败达到阈值时，自动“熔断”（停止调用），避免故障级联。</li><li>服务降级（Fallback）:在服务不可用或响应超时时，自动切换到预定义的降级逻辑（如返回缓存数据、默认值或友好提示）</li><li>线程隔离（Thread Isolation）:将不同服务的调用分配到独立线程池，避免单个服务故障耗尽主线程资源。</li><li>限流与流量控制: 通过 <code>maxConcurrentRequests</code> 限制单线程池内最大并发请求数, 通过滑动时间窗口统计, 可动态调整</li><li>实时监控与指标: 收集请求成功/失败率、响应时间、熔断状态等指标, 可集成第三方可视化工具</li><li>请求合并（Request Collapsing）:一般用不到</li></ul><h3 id="熔断-vs-降级的区别" tabindex="-1"><strong>熔断 vs. 降级的区别</strong> <a class="header-anchor" href="#熔断-vs-降级的区别" aria-label="Permalink to &quot;**熔断 vs. 降级的区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><strong>Feign Fallback（降级）</strong></th><th><strong>Hystrix 熔断</strong></th></tr></thead><tbody><tr><td><strong>触发条件</strong></td><td>任何单次调用失败（超时、HTTP 错误等）</td><td>连续多次失败（如 50% 错误率，持续 10 次请求）</td></tr><tr><td><strong>执行动作</strong></td><td>立即返回兜底数据，<strong>不阻断后续请求</strong></td><td>当触发熔断后，<strong>阻断后续请求</strong> ，直到半开状态重试</td></tr><tr><td><strong>目的</strong></td><td>保证客户端快速响应，避免阻塞</td><td>防止故障级联，保护系统稳定性</td></tr><tr><td><strong>状态机</strong></td><td>无状态，每次失败直接触发</td><td>有状态（CLOSED → OPEN → HALF-OPEN）</td></tr><tr><td><strong>适用场景</strong></td><td>服务短暂不可用（如数据库连接池耗尽）</td><td>服务持续不可用（如下游服务宕机）</td></tr></tbody></table><p><strong>Hystrix 熔断后自动执行降级</strong></p><p>Hystrix 的熔断机制会在服务连续失败达到阈值后， <strong>自动阻断后续请求</strong> ，并在此时执行降级逻辑（即 Feign 的 Fallback 方法）。这是两者的协同工作流程。</p><p>工作流程：</p><ol><li><strong>正常调用</strong> ：Feign 客户端调用服务，Hystrix 监控请求状态。</li><li><strong>第一次失败</strong> ：服务返回异常（如 <code>500 Internal Server Error</code>），Hystrix 记录失败次数。</li><li><strong>连续失败</strong> ：当失败次数达到阈值（如 <code>errorThresholdPercentage=50%</code>），Hystrix 触发熔断，将状态从 <code>CLOSED</code> → <code>OPEN</code>。</li><li><strong>熔断期间</strong> ：所有新请求直接走 Fallback 方法（即降级逻辑），不再实际调用服务。</li><li><strong>半开状态</strong> ：熔断后等待 <code>sleepWindowMillis</code>（默认 5 秒），尝试一次新请求：</li></ol><ul><li>成功：状态恢复为 <code>CLOSED</code>，继续正常调用。</li><li>失败：再次熔断，延长熔断时间。</li></ul>',11)]))}const u=r(a,[["render",n]]);export{_ as __pageData,u as default};
